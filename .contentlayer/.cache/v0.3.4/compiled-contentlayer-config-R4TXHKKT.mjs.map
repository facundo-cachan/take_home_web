{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// @ts-nocheck\n\nimport { ComputedFields, defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport path from 'path'\nimport readingTime from 'reading-time'\n// Remark packages\nimport {\n  extractTocHeadings,\n  remarkCodeTitles,\n  remarkExtractFrontmatter,\n  remarkImgToJsx,\n} from 'pliny/mdx-plugins/index.js'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\n// Rehype packages\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeCitation from 'rehype-citation'\nimport rehypeKatex from 'rehype-katex'\nimport rehypePresetMinify from 'rehype-preset-minify'\nimport rehypePrismPlus from 'rehype-prism-plus'\nimport rehypeSlug from 'rehype-slug'\n\nconst root = process.cwd()\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n}\n\nexport const User = defineDocumentType(() => ({\n  name: 'User',\n  filePathPattern: 'user/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: './src/data',\n  documentTypes: [User],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'data') }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  }\n})\n"],
  "mappings": ";AAEA,SAAyB,oBAAoB,kBAAkB;AAC/D,OAAO,UAAU;AACjB,OAAO,iBAAiB;AAExB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,eAAe;AACtB,OAAO,gBAAgB;AAEvB,OAAO,4BAA4B;AACnC,OAAO,oBAAoB;AAC3B,OAAO,iBAAiB;AACxB,OAAO,wBAAwB;AAC/B,OAAO,qBAAqB;AAC5B,OAAO,gBAAgB;AAEvB,IAAM,OAAO,QAAQ,IAAI;AACzB,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,EACjE;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,QAAQ,mBAAmB,IAAI,KAAK,GAAG,EAAE;AAC5E;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,OAAO,EAAE,MAAM,SAAS;AAAA,IACxB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,UAAU,EAAE,MAAM,SAAS;AAAA,IAC3B,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,QAAQ,EAAE,MAAM,SAAS;AAAA,EAC3B;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,KAAK,QAAQ,IAAI;AAAA,IACjB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,gBAAgB,EAAE,MAAM,KAAK,KAAK,MAAM,MAAM,EAAE,CAAC;AAAA,MAClD,CAAC,iBAAiB,EAAE,iBAAiB,MAAM,eAAe,KAAK,CAAC;AAAA,MAChE;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
